# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
defaults: &defaults
  docker:
    - image: quay.io/pantheon-public/build-tools-ci:from-circleci-php
  working_directory: ~/ataylorme-wordpress
  environment:
    #=========================================================================
    # In addition to the environment variables defined in this file, also
    # add the following variables in the Circle CI UI.
    #
    # See: https://circleci.com/docs/2.0/env-vars/
    #
    # TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
    # TERMINUS_TOKEN: The Pantheon machine token
    # GITHUB_TOKEN:   The GitHub personal access token
    # GIT_EMAIL:      The email address to use when making commits
    #
    # TEST_SITE_NAME: The name of the test site to provide when installing.
    # ADMIN_PASSWORD: The admin password to use when installing.
    # ADMIN_EMAIL:    The email address to give the admin when installing.
    #=========================================================================
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"

    # The variables below usually do not need to be modified.

    #======================================================================================================================================
    # Circle CI 2.0 does not yet expand environment variables so they have to be manually EXPORTed
    # Once environment variables can be expanded the variables below can be uncommented and the EXPORTs in set-up-globals.sh can be removed
    # See: https://discuss.circleci.com/t/unclear-how-to-work-with-user-variables-circleci-provided-env-variables/12810/11
    # See: https://discuss.circleci.com/t/environment-variable-expansion-in-working-directory/11322
    # See: https://discuss.circleci.com/t/circle-2-0-global-environment-variables/8681
    #======================================================================================================================================

    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}'
    ADMIN_USERNAME: admin
    TERM: dumb

version: 2.1

jobs:
  configure_env_vars:
    <<: *defaults

    steps:
      - checkout

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/4.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: clone-bash-env
          command: cp $BASH_ENV bash_env.txt

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      - persist_to_workspace:
          root: .
          paths:
            - bash_env.txt

  unit_test_code_sniff:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run composer install to get the vendor directory
          command: composer install

      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache

      - run:
          name: delete web
          command: rm -rf web

      - run:
          name: reset web
          command: git checkout -- web

      - run:
          name: lint php code for syntax errors
          command: composer -n lint

      - run:
          name: check coding standards
          command: composer -n code-sniff

      - run:
          name: run unit tests
          command: composer -n unit-test

  build_php:
    <<: *defaults
    steps:
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-
            - wp-rig-vendor-{{ checksum "web/wp-content/themes/wprig/composer.lock" }}
            - wp-rig-vendor-

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: build assets
          command: composer -n build-assets

      - run:
          name: wprig composer install
          command: ./.ci/scripts/wprig-composer-install

      - save_cache:
          key: wp-rig-vendor-{{ checksum "web/wp-content/themes/wprig/composer.lock" }}
          paths:
            - $HOME/ataylorme-wordpress/web/wp-content/themes/wprig/vendor

      - save_cache:
          key: vendor-{{ checksum "composer.lock" }}
          paths:
            - $HOME/ataylorme-wordpress/vendor

      - persist_to_workspace:
          root: .
          paths:
            - web
            - vendor

  build_wprig_theme_node:
    <<: *defaults
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - run:
          name: sync web
          command: rsync -az /tmp/web/ web

      - restore_cache:
          keys:
            - wp-rig-node-modules-{{ checksum "web/wp-content/themes/wprig/package-lock.json" }}
            - wp-rig-node-modules-

      - run:
          name: build theme
          command: ./.ci/scripts/wprig-npm-install

      - save_cache:
          key: wp-rig-node-modules-{{ checksum "web/wp-content/themes/wprig/package-lock.json" }}
          paths:
            - $HOME/ataylorme-wordpress/web/wp-content/themes/wprig/node_modules

      - run:
          name: remove dev theme
          command: rm -rf web/wp-content/themes/wprig

      - persist_to_workspace:
          # Must be relative path from working_directory
          root: .
          # Must be relative path from root
          paths:
            - web

  deploy_to_pantheon:
    <<: *defaults
    steps:
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: sync web
          command: rsync -az /tmp/web/ web

      - run:
          name: sync vendor
          command: rsync -az /tmp/vendor/ vendor

      - run:
          name: deploy to Pantheon
          command: ./.ci/scripts/deploy-to-pantheon

      - run:
          name: set secrets
          command: ./.ci/scripts/set-secrets

      - run:
          name: handle merge to master (if needed)
          command: ./.ci/scripts/merge-master

  behat_test:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: run composer install again to get dev dependencies
          command: composer install

      - run:
          name: run acceptance tests with Behat
          command: ./.ci/scripts/behat-test

      - run:
          name: behat-cleanup
          command: ./.ci/scripts/behat-cleanup
          when: always

  visual_regression_test:
    <<: *defaults
    docker:
      - image: backstopjs/backstopjs:4.1.9
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - run:
          name: set environment variables
          command: ./.ci/scripts/set-up-env

      - run:
          name: visual regression test
          command: ./.ci/scripts/visual-regression-test

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  lighthouse_test:
    <<: *defaults
    docker:
      - image: circleci/node:lts-browsers
      # circleci/php:7-node-browsers
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - restore_cache:
          keys:
            - npm-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - npm-dependencies-

      # Set environment variables
      - run: ./.ci/scripts/set-up-env

      - run:
          name: npm install
          command: npm install

      - run:
          name: lighthouse audit
          command: ./.ci/scripts/lighthouse/lighthouse-audit

      - save_cache:
          paths:
            - node_modules
          key: npm-dependencies-{{ checksum "package-lock.json" }}

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  composer_lock_updater:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run composer lock updater
          command: set -e && clu https://${GITHUB_TOKEN}:x-oauth-basic@github.com/${CI_PROJECT_USERNAME}/${CI_PROJECT_REPONAME}.git | sed -e "s/${GITHUB_TOKEN}/[REDACTED]/g"

  deploy_to_live:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: deploy to live
          command: ./.ci/scripts/deploy-to-live

workflows:
  version: 2
  build_and_test:
    jobs:
      # Set up environment variables
      - configure_env_vars
      # Build PHP dependencies
      - build_php
      - build_wprig_theme_node:
          requires:
            - configure_env_vars
            - build_php
      # Install dev dependencies and do simple tests (sniff, unit tests, etc.)
      - unit_test_code_sniff
      - deploy_to_pantheon:
          requires:
            - build_wprig_theme_node
            - build_php
      # Deploy before running visual tests
      - visual_regression_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
      # Deploy before running lighthouse tests
      - lighthouse_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
      # Deploy before running Behat tests
      - behat_test:
          requires:
            - deploy_to_pantheon
            - visual_regression_test
            - lighthouse_test
      # Deploy to live if tests pass
      - deploy_to_live:
          requires:
            - deploy_to_pantheon
            - unit_test_code_sniff
            - behat_test
            - visual_regression_test
            - lighthouse_test
          filters:
            branches:
              only:
                - master

  scheduled_update_check:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - composer_lock_updater
