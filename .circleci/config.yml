# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
defaults: &defaults
  docker:
    - image: quay.io/pantheon-public/build-tools-ci:6.x
  working_directory: ~/ataylorme-wordpress
  environment:
    #=========================================================================
    # In addition to the environment variables defined in this file, also
    # add the following variables in the Circle CI UI.
    #
    # See: https://circleci.com/docs/2.0/env-vars/
    #
    # TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
    # TERMINUS_TOKEN: The Pantheon machine token
    # GITHUB_TOKEN:   The GitHub personal access token
    # GIT_EMAIL:      The email address to use when making commits
    #
    # TEST_SITE_NAME: The name of the test site to provide when installing.
    # ADMIN_PASSWORD: The admin password to use when installing.
    # ADMIN_EMAIL:    The email address to give the admin when installing.
    #=========================================================================
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"

    # The variables below usually do not need to be modified.

    #======================================================================================================================================
    # Circle CI 2.0 does not yet expand environment variables so they have to be manually EXPORTed
    # Once environment variables can be expanded the variables below can be uncommented and the EXPORTs in set-up-globals.sh can be removed
    # See: https://discuss.circleci.com/t/unclear-how-to-work-with-user-variables-circleci-provided-env-variables/12810/11
    # See: https://discuss.circleci.com/t/environment-variable-expansion-in-working-directory/11322
    # See: https://discuss.circleci.com/t/circle-2-0-global-environment-variables/8681
    #======================================================================================================================================

    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}'
    ADMIN_USERNAME: admin
    TERM: dumb

version: 2

jobs:
  configure_env_vars:
    <<: *defaults

    steps:
      - checkout

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: clone-bash-env
          command: cp $BASH_ENV bash_env.txt

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      - persist_to_workspace:
          root: .
          paths:
            - bash_env.txt

  create_multidev:
    <<: *defaults

    steps:
      - checkout

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run multidev creation
          command: ./.ci/deploy/pantheon/create-multidev

  static_tests:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - main-vendor-{{ checksum "composer.lock" }}
            - main-vendor-

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run static tests
          command: ./.ci/test/static/run

      - save_cache:
          key: main-vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor

  build_php:
    <<: *defaults
    steps:
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - restore_cache:
          keys:
            - main-vendor-{{ checksum "composer.lock" }}
            - main-vendor-

      - run:
          name: build root PHP assets
          command: ./.ci/build/root-php

      - save_cache:
          key: main-vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - restore_cache:
          keys:
            - wp-rig-vendor-{{ checksum "web/wp-content/themes/wprig/composer.lock" }}
            - wp-rig-vendor-

      - run:
          name: build theme PHP assets
          command: ./.ci/build/theme-php

      - save_cache:
          key: wp-rig-vendor-{{ checksum "web/wp-content/themes/wprig/composer.lock" }}
          paths:
            - web/wp-content/themes/wprig/vendor

      - persist_to_workspace:
          root: .
          paths:
            - web
            - vendor

  build_node:
    <<: *defaults
    docker:
      - image: circleci/node:lts
    steps:
      - checkout

      - run:
          name: "Install rsync"
          command: sudo apt-get install -y rsync

      - attach_workspace:
          at: /tmp

      - run:
          name: sync web
          command: rsync -rz /tmp/web/ web

      - restore_cache:
          keys:
            - wp-rig-node-modules-{{ checksum "web/wp-content/themes/wprig/package-lock.json" }}
            - wp-rig-node-modules-

      - run:
          name: build theme Node assets
          command: ./.ci/build/theme-node

      - save_cache:
          key: wp-rig-node-modules-{{ checksum "web/wp-content/themes/wprig/package-lock.json" }}
          paths:
            - web/wp-content/themes/wprig/node_modules

      - run:
          name: remove dev theme
          command: rm -rf web/wp-content/themes/wprig

      - persist_to_workspace:
          # Must be relative path from working_directory
          root: .
          # Must be relative path from root
          paths:
            - web

  deploy_to_pantheon:
    <<: *defaults
    steps:
      - checkout

      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: sync web
          command: rsync -rz /tmp/web/ web

      - run:
          name: sync vendor
          command: rsync -rz /tmp/vendor/ vendor

      - run:
          name: deploy to Pantheon
          command: ./.ci/deploy/pantheon/dev-multidev

      - run:
          name: set secrets
          command: ./.ci/deploy/pantheon/set-secrets

      - run:
          name: handle merge to master (if needed)
          command: ./.ci/deploy/pantheon/merge-master

  behat_test:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - main-vendor-{{ checksum "composer.lock" }}
            - main-vendor-

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: prepare for Behat testing
          command: ./.ci/test/behat/initialize

      - run:
          name: run acceptance tests with Behat
          command: ./.ci/test/behat/run

      - run:
          name: clean up after Behat
          command: ./.ci/test/behat/cleanup
          when: always

      - save_cache:
          key: main-vendor-{{ checksum "composer.lock" }}
          paths:
            - vendor

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  visual_regression_test:
    <<: *defaults
    docker:
      - image: backstopjs/backstopjs:4.1.9
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - run:
          name: set environment variables
          command: ./.ci/scripts/set-up-env

      - restore_cache:
          keys:
            - npm-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - npm-dependencies-

      - run:
          name: set environment variables
          command: ./.ci/scripts/set-up-env

      - run:
          name: Install Node dependencies
          # npm install will rewrite package-lock.json
          # to use the committed package-lock.json
          # we need to run npm ci.
          # See https://docs.npmjs.com/cli/ci.html
          command: npm ci

      - run:
          name: visual regression test
          command: ./.ci/test/visual-regression/run

      - save_cache:
          key: npm-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  lighthouse_test:
    <<: *defaults
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - checkout

      - attach_workspace:
          at: /tmp

      - restore_cache:
          keys:
            - npm-dependencies-{{ checksum "package-lock.json" }}
            # fallback to using the latest cache if no exact match is found
            - npm-dependencies-

      - run:
          name: set environment variables
          command: ./.ci/scripts/set-up-env

      - run:
          name: Install Node dependencies
          # npm install will rewrite package-lock.json
          # to use the committed package-lock.json
          # we need to run npm ci.
          # See https://docs.npmjs.com/cli/ci.html
          command: npm ci

      - run:
          name: lighthouse audit
          command: ./.ci/test/lighthouse/run

      - save_cache:
          key: npm-dependencies-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  composer_lock_updater:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run composer lock updater
          command: .ci/build/composer-update

  deploy_to_live:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: deploy to live
          command: ./.ci/deploy/pantheon/live

      - run:
          name: restore backup
          command: terminus -n backup:restore $TERMINUS_SITE.live --element=database --yes
          when: on_fail

  db_sync:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: sync db
          command: ./.ci/deploy/pantheon/db-sync

  cron_ping:
    <<: *defaults
    steps:
      - checkout

      - run:
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: log in
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: Run the cron ping script
          command: ./.ci/deploy/pantheon/cron-ping

workflows:
  version: 2
  build_and_test:
    jobs:
      # Set up environment variables
      - configure_env_vars
      # Build PHP dependencies
      - build_php
      # Only create the multidev for branches
      - create_multidev:
          filters:
            branches:
              ignore:
                - master
      - build_node:
          requires:
            - configure_env_vars
            - build_php
      # Install dev dependencies and do simple tests (sniff, unit tests, etc.)
      - static_tests
      - deploy_to_pantheon:
          requires:
            - build_node
            - build_php
            - create_multidev
      # Deploy before running visual tests
      - visual_regression_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
          filters:
            branches:
              ignore:
                - master
      # Deploy before running lighthouse tests
      - lighthouse_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
      # Deploy before running Behat tests
      - behat_test:
          requires:
            - deploy_to_pantheon
            - visual_regression_test
            - lighthouse_test
      # Deploy to live if tests pass
      - deploy_to_live:
          requires:
            - deploy_to_pantheon
            - static_tests
            - behat_test
            - visual_regression_test
            - lighthouse_test
          filters:
            branches:
              only:
                - master

  scheduled_update_check:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - composer_lock_updater

  scheduled_db_sync:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - db_sync